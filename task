#!/usr/bin/env python

from database import *
from sys import argv, exit, stdin

if len(argv) == 1:
    print("Usage: \n  task start\n  task end")
    exit(1)

create_database_if_not_present()

class Task(object):
    def __init__(self, results):
        if results != None:
            self.id = results['id']
            self.description = results['description']
            self.ci_level = results['ci_level']
            self.range_min = results['range_min']
            self.range_max = results['range_max']
            self.started = results['started']
            self.ended = results['ended']

    def process_ranges(self):
        import re
        rp = re.compile("(\d+) *- *(\d+) *(minutes|hours|days|weeks)")
        m = rp.match(self.range_raw)
        convert = {'minutes': 1, 'hours': 60, 'days':60*24, 'weeks': 60*24*7}
        if m != None and len(m.groups()) == 3:
            rmin = int(m.group(1))
            rmax = int(m.group(2))
            unit = m.group(3)
            self.range_min = rmin * convert[unit]
            self.range_max = rmax * convert[unit]
        else:
            print("range must be of form 'M - N units' where M,N are integers and 'units' is a unit like days or weeks")
            exit(1)

    def start_and_save(self):
        pass

    def finish_and_save(self):
        pass

    def __str__(self):
        return "task #%d started at <%s>" % (self.id, self.started)

def get_current_task_from_db():
    sql = "SELECT max(id) as id, description, ci_level, range_min, range_max, started, ended FROM tasks"
    results = query_db(sql)
    task = Task(results[0])
    task.finish()
    print(task)
    return task


if argv[1] == "start":
    task = Task(None)
    print("Description of task: ")
    task.description = stdin.readline()
    task.ci_level = 0.9 # default to 90% Confidence Interval for 1st iteration
    print("Estimated range of time to completion (90% CI): ")
    task.range_raw = stdin.readline()
    task.process_ranges()
    task.start_and_save()
elif argv[1] == "end":
    task = get_current_task_from_db()
    print(task.id)
